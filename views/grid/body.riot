<grid-body>
  <div class="grid-body">
    <div if={ props.loading('grid') } class="card">
      <div class="card-body py-5 text-center">
        <i class="fa fa-spinner fa-spin h1" />
      </div>
    </div>

    <div if={ !props.loading('grid') } each={ (item, i) in props.items } onclick={ (e) => onRow(e, item) } class={ classes({ 'grid-row' : true, 'grid-row-selected' : isSelected(item) }) }>

      <div class="grid-column grid-column-edit">
        <div class="column-inner">
          <div class="column-body">
            <div class="form-check">
              <input if={ !props.dashup.can(props.page, 'submit') } class="form-check-input" disabled type="checkbox" value="selected" id={ item.get('_id') } />
              <input if={ props.dashup.can(props.page, 'submit') } class="form-check-input" type="checkbox" value="selected" checked={ isSelected(item) } id={ item.get('_id') } onchange={ (e) => onSelect(e, item) } />
            </div>
          </div>
        </div>
      </div>

      <div class="grid-column-scroll">
        <div each={ (column, i) in props.page.get('data.columns') } class={ classes({ 'grid-field' : true, 'active' : false }) } style={ `flex-basis:${column.basis}%;max-width:${column.basis}%` }>
          <grid-column i={ i } class="field-inner" column={ column } item={ item } { ...props } />
        </div>
      </div>

      <div class="grid-column grid-column-edit">
        <div class="column-inner">
          <div class="column-body" if={ !props.dashup.can(props.page, 'submit') }>
            <button class="btn btn-sm btn-outline-secondary" type="button">
              <i class="fa fa-ellipsis-h" />
            </button>
          </div>
          <div class="column-body dropdown" if={ props.dashup.can(props.page, 'submit') }>
            <button class="btn btn-sm btn-outline-primary dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
              <i class="fa fa-ellipsis-h" />
            </button>
            <div class="dropdown-menu dropdown-menu-right p-0">
              <div class="card p-2">
                <nav class="nav flex-column">
                  <a each={ (form, i) in props.forms } href={ `/app/${form}/${item.get('_id')}` } class="nav-link">
                    Update: { props.dashup.page(form).get('name') }
                  </a>
                  <hr />
                  <a href={ `/app/${props.forms[0]}/${item.get('_id')}/remove?redirect=${window.location.href}` } class="nav-link text-danger">
                    Remove
                  </a>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    // import column
    import gridColumn from './column';

    // export default
    export default class GridBody {


      // ////////////////////////////////////////////////////////////////////////////
      //
      // RIOT METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * static get components
       */
      static get components() {
        // return grid
        return {
          gridColumn,
        };
      }


      // ////////////////////////////////////////////////////////////////////////////
      //
      // EVENT METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * on select
       */
      onSelect(e, item) {
        // check change
        const selected = $(e.target).is(':checked');
        
        // run props
        this.props.onSelect(item, selected);
      }

      /**
       * on row
       */
      onRow(e, item) {
        // on row
        if (this.props.onRow) return this.props.onRow(e, item);
      }

      /**
       * is selected
       */
      isSelected(item) {
        // check selected
        if (!this.props.selected) return;

        // check type
        if (this.props.selected.type === 'all') return true;
        if (this.props.selected.type === 'items') return this.props.selected.items.includes(item.get('_id'));
        if (this.props.selected.type === 'all-minus') return !this.props.selected.items.includes(item.get('_id'));
      }

      // ////////////////////////////////////////////////////////////////////////////
      //
      // MISC METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * ref
       */
      ref(name) {
        // set refs
        if (!this.refs) this.refs = {};

        // return ref function
        return (that) => {
          // set ref
          this.refs[name] = that;
        };
      }

      /**
       * classes
       */
      classes(obj) {
        // return object
        return Object.keys(obj).filter((k) => obj[k]).join(' ');
      }
    }
  </script>
</grid-body>