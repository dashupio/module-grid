<grid-column>
  <div class="grid-column-content" onclick={ (e) => onEdit(e) }>
    <div if={ props.column.type === 'id' } class="text-overflow">
      { props.item.get('_id') }
    </div>
    <div if={ props.column.field !== 'custom' && props.column.type !== 'id' }>
      <div if={ props.getField(field) } is={ props.getField(field).view ? `${props.getField(field).view}-field` : `field-${field.type}-view` } view="view" field={ field } value={ getValue() } { ...(getProps()) } />
    </div>
    <div if={ props.column.field === 'custom' }>
      <hbs template={ props.column.view || '' } data={ props.item ? props.item.toJSON() : {} } />
    </div>
  </div>

  <script>

    // export default
    export default class GridColumn {


      // ////////////////////////////////////////////////////////////////////////////
      //
      // RIOT METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * on before mount
       */
      onBeforeMount(...args) {
        // blocks
        this.blocks = ['image', 'code', 'file', 'address', 'wysiwyg', 'textarea'];

        // bind methods
        this.getValue = this.getValue.bind(this);
        this.getProps = this.getProps.bind(this);
        this.getField = this.getField.bind(this);

        // set field
        this.field = this.getField();
      }

      /**
       * on before mount
       */
      onBeforeUpdate(...args) {
        // set field
        this.field = this.getField();
      }


      // ////////////////////////////////////////////////////////////////////////////
      //
      // EVENT METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * on edit
       */
      onEdit(e) {
        // check target
        if ($(e.target).is('a') || $(e.target).closest('a').length) return;

        // check edit
        if (this.props.column.field === 'custom') return;

        // add page
        e.preventDefault();
        e.stopPropagation();

        // check can
        if (!this.props.dashup.can(this.props.page, 'submit')) return;

        // on edit
        this.props.onEdit(this.props.item, this.field, this.$('.grid-column-content'));
      }

      /**
      * get data
      *
      * @return {*}
      */
      getValue() {
        // get field
        const field = this.field;

        // return object assign
        return this.props.item ? this.props.item.get(field.name || field.uuid) : null;
      }

      /**
       * get field
       */
      getField() {
        // get column
        const column = this.props.column;

        // push find
        return this.props.fields.find((f) => f.uuid === ((column.field || {}).uuid || column.field)) || column;
      }

      /**
       * get props
       */
      getProps() {
        // props
        const props = { ...this.props };

        // delete
        delete props.view;
        delete props.type;
        delete props.class;
        delete props.struct;

        // props
        return props;
      }
    }
  </script>
</grid-column>