<block-grid-config>
  <div>
    <div class="mb-3">
      <label class="form-label">
        Name
      </label>
      <input name="name" class="form-control" type="text" value={ props.block.name || '' } onchange={ (e) => onName(e) } />
    </div>

    <div class="mb-3">
      <label class="form-label">
        Choose Model
      </label>
      <eden-select on-change={ (e, val) => onModel(val) } ref={ ref('model') } placeholder="Select Model" data={ getModel() } />
      <small>
        The model this page should display.
      </small>
    </div>

    <div class="mb-3" if={ getSelectedModel() }>
      <label class="form-label">
        Choose Form
      </label>
      <eden-select on-change={ (e, val) => onForms(val) } ref={ ref('forms') } placeholder="Select Form" data={ getForms() } multiple={ true } />
      <small>
        The forms that this grid will filter by.
      </small>
    </div>

    <div if={ getSelectedForms().length }>
      <hr />
        
      <div class="mb-3">
        <div class="form-check form-switch">
          <input class="form-check-input" id="is-required" type="checkbox" onchange={ (e) => onBackground(e) } { ...getProps({ checked : !props.block.background }) }>
          <label class="form-check-label" for="is-required">
            Enable Background
          </label>
        </div>
      </div>
        
      <div class="mb-3">
        <label class="form-label">
          Filter By
        </label>

        <dashup-query fields={ getFields() } on-change={ (val) => onFilter(val) } value={ props.block.filter ? JSON.parse(props.block.filter) : [] } />
      </div>
    </div>
  </div>

  <script>

    // export config
    export default class BlockGridConfig {


      // ////////////////////////////////////////////////////////////////////////////
      //
      // RIOT METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * on before mount
       */
      onBeforeMount() {
        // bind methods
        this.onName = this.onName.bind(this);
        this.onForms = this.onForms.bind(this);
        this.onFilter = this.onFilter.bind(this);
      }


      // ////////////////////////////////////////////////////////////////////////////
      //
      // EVENT METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * on model
       */
      async onModel(val) {
        // get value
        if (!val) val = this.refs.model.val();

        // model
        if (!val || !val.length) return;

        // loading model
        this.loading('model', true);

        // set again
        if (val !== this.props.block.model && this.props.page.get('data.form')) {
          // set form again
          await this.props.set('form', null);
        }
        
        // set model
        await this.props.set('model', val);

        // loading model
        this.loading('model', false);
      }

      /**
       * on model
       */
      onForms(vals) {
         // forms
        if (!vals) vals = this.refs.forms.val();
        if (!vals) vals = [];
        if (!Array.isArray(vals)) vals = [vals];

        // set model
        this.props.set('forms', vals);
      }

      /**
       * on color
       */
      onName(e) {
        // prevent
        e.preventDefault();
        e.stopPropagation();

        // set color
        this.props.set('name', e.target.value);
      }

      /**
       * on model
       */
      onFilter(val) {
        // set model
        this.props.set('filter', JSON.stringify(val));
      }

      /**
       * on model
       */
      onBackground (e) {
        // get value
        const val = $(e.target).is(':checked');

        // get backlog
        const background = !val;
        
        // set model
        this.props.set('background', background);
      }


      // ////////////////////////////////////////////////////////////////////////////
      //
      // GET METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * get value
       */
      getModel() {
        // return value
        return Array.from(this.props.dashup.get('pages').values()).filter((page) => {
          // return model pages
          return page.get('type') === 'model';
        }).map((page) => {
          // return type
          return {
            name     : page.get('name'),
            value    : page.get('_id'),
            selected : this.getSelectedModel() === page.get('_id'),
          };
        });
      }

      /**
       * get value
       */
      getForms() {
        // return value
        return Array.from(this.props.dashup.get('pages').values()).filter((page) => {
          // return model pages
          return page.get('type') === 'form' && page.get('data.model') === this.props.block.model;
        }).map((page) => {
          // return type
          return {
            name     : page.get('name'),
            value    : page.get('_id'),
            selected : (this.getSelectedForms() || []).includes(page.get('_id')),
          };
        });
      }

      /**
       * get props
       */
      getProps(obj) {
        // return get props
        return Object.keys(obj).reduce((accum, key) => {
          // set accum
          if (obj[key]) accum[key] = true;

          // return accum
          return accum;
        }, {});
      }

      /**
       * get fields
       */
      getFields() {
        // get forms
        const forms = this.getSelectedForms();

        // return fields
        return Array.from(this.props.dashup.get('pages').values()).filter((page) => {
          // return model pages
          return page.get('type') === 'form' && forms.includes(page.get('_id'));
        }).reduce((accum, page) => {
          // fields
          accum.push(...(page.get('data.fields') || []));
          
          // return accum
          return accum;
        }, []);
      }

      /**
       * get selected model
       */
      getSelectedModel() {
        // check model
        return this.props.block.model || this.props.model;
      }

      /**
       * get selected forms
       */
      getSelectedForms() {
        // forms
        let forms = this.props.block.forms || [];

        // check form
        if (!forms.length && this.props.form) forms = [this.props.form];
        if (!forms.length && this.props.forms) forms = this.props.forms;

        // return forms
        return forms;
      }


      // ////////////////////////////////////////////////////////////////////////////
      //
      // MISC METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * ref
       */
      ref(name) {
        // set refs
        if (!this.refs) this.refs = {};

        // return ref function
        return (that) => {
          // set ref
          this.refs[name] = that;
        };
      }

      /**
       * set loading
       */
      loading(type, way) {
        // set loading
        if (!this.__loading) this.__loading = new Map();

        // check loading
        if (!type) return !!Array.from(this.__loading.values()).find((v) => v);
        if (typeof way === 'undefined') return !!this.__loading.get(type);

        // set loading
        this.__loading.set(type, way);
        this.update();
      }
    }
  </script>
</block-grid-config>